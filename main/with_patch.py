import json
import os
import re
import subprocess

from main.main import read_dataset
from utils.miscellaneous import checkout_version, get_next_version, git_clone
from utils.save_github_commit import parse_diff, save_commit_diff_as_file
from config import repo_dir, javaparser_path, dataset_name

def read_processed_cve():
    cves = []
    with open('with_patch_results/results.csv', 'r') as f:
        for line in f:
            cves.append(line.split(',')[0])
    return cves


def create_csv():
    with open('with_patch_results/results.csv', 'w') as f:
        f.write('cve,location_same,root_cause\n')


def parse_patch_locate_root_cause():
    os.makedirs('with_patch_results', exist_ok=True)
    os.makedirs('patches', exist_ok=True)
    # create_csv()
    processed_cve = read_processed_cve()
    start =False
    for i, each in enumerate(read_dataset(dataset_name)):
        cve = each['cve']
        if each['same_location'] != '':
            continue
        # skip processed cve
        if cve in processed_cve:
            continue
        # if cve=='CVE-2015-5253':
        #     continue

        print(i, '########## Current cve:', cve)
        description = each['description']
        repo = each['repo']
        version = each['version']

        versions = each['versions']
        # versions.sort()
        # print('|'.join(versions))
        clazzes = each['clazz']
        commit_url = each['commit_url']
        if not commit_url:
            continue
        clazz = each['clazz']
        output_file_path = 'patches/'+cve+'.patch'
        if '|' not in clazz:
            clazzes = None
        else:
            clazzes = clazz.split('|')
            
        methods = each['methods']
        if not os.path.exists(output_file_path):
            save_commit_diff_as_file(commit_url, output_file_path)
        if not os.path.exists(output_file_path):
            with open('with_patch_results/results.csv', 'a') as f:
                f.write(cve+',No commit file\n')
            continue
        with open(output_file_path, 'r') as file:
            changes = parse_diff(file.read())


        # Serialize the parsed changes to JSON
        json_output = json.dumps(changes, indent=4)
        # Save the JSON to a file
        with open(f"patches/{cve}_parsed_diffs.json", "w") as json_file:
            json_file.write(json_output)
        repo_path = os.path.join(repo_dir,repo)+'/'

        # for file_change in changes:
        #     print("---------------------------------------------------")
        #     print("---------------------------------------------------")
        #     print(f"File: {file_change['old_file_path']} -> {file_change['new_file_path']}")
        #     for diff in file_change['diffs']:
        #         print("Added Lines:", diff['added_lines'])
        #         print("Removed Lines:", diff['removed_lines'])
        #         print("Context Lines:", diff['context_lines'])
        #         print("---------------------------------------------------")


        repo_path = os.path.join(repo_dir,repo)+'/'
        if not os.path.exists(repo_path):
            print('cloning', repo)
            git_clone(repo, each['repo_link'])
        # checkout_version(repo_path, version)
        # apply_patch(repo_path, patch_content, cve)
        if not os.path.exists(repo_path):
            continue
        next_version = get_next_version(repo_path, version, output_file_path, commit_url)

        checkout_version(repo_path, next_version, cve)

        print('Args: ', cve, repo_path.replace('..', '/Users/XXX/workspace'), f"../../../patches/{cve}_parsed_diffs.json")

        # subprocess call jar
        # Running the subprocess and capturing both stdout and stderr
        patch_file = f"patches/{cve}_parsed_diffs.json"
        result = subprocess.run(['java', '-jar', javaparser_path, cve, repo_path, patch_file],
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # Accessing the output and error
        stdout_output = result.stdout
        stderr_output = result.stderr

        # Now you can check and handle both separately
        print("STDOUT:", stdout_output)
        print("STDERR:", stderr_output)


        if 'Final result: No pattern found' in stdout_output:
            with open('with_patch_results/results.csv', 'a') as f:
                f.write(cve+',No pattern found\n')
            print('No pattern found')
            continue
        reason = stdout_output.split(',')[-1].strip()
        res = stdout_output.replace(reason, '').strip()
        if 'Final result' not in res and 'No such file or directory' in stderr_output:
            with open('with_patch_results/results.csv', 'a') as f:
                f.write(cve+',No such file or directory\n')
            print('No such file or directory')
            continue
        with open('with_patch_results/results.csv', 'a') as f:
            f.write(cve+','+res + reason+'\n')



