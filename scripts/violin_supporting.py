import os
from config import repo_dir
from main.fine_tune_function import get_all_funcs
from utils.evaluation import get_gt_funcs_from_cve
from utils.repo_file_utils import read_dataset

def violin_statistics():
    dataset = read_dataset('data/xxx data - filtered_cve_with_link.csv')
    with open('data/violin_statistics.csv', 'w') as f:
        f.write('cve, funcs, files, cwe, ground_truth_length \n')
    for each in dataset:
        cve = each['cve']

        if each['same_location']=='':
            break
        # count file number in repo
        repo = each['repo']
        all_funcs = get_all_funcs(repo_dir+repo, cve, each)
        files = set()
        cwe = each['cwe']
        for func in all_funcs:
            files.add(func['file'])

        ground_truth_length = len(get_gt_funcs_from_cve(cve))
        with open('data/violin_statistics.csv', 'a') as f:
            f.write(f'{cve}, {len(all_funcs)}, {len(files)}, {cwe}, {ground_truth_length} \n')

def plot_violin():
    # Function to format the axis ticks with commas
    def with_commas(x, pos):
        return '{:,}'.format(int(x))
    import matplotlib.pyplot as plt
    import seaborn as sns
    import pandas as pd
    import matplotlib.ticker as ticker
    # Reading the data from a CSV file
    data_path = 'data/xxx data - violin.csv'  # Replace with the path to your actual data file
    data = pd.read_csv(data_path)

    # Correct potential issues with column names (e.g., trailing spaces) and data types
    data.columns = data.columns.str.strip()
    data['funcs'] = pd.to_numeric(data['funcs'], errors='coerce')
    data['files'] = pd.to_numeric(data['files'], errors='coerce')
    data['ground_truth_length'] = pd.to_numeric(data['ground_truth_length'], errors='coerce')
    # Assuming 'data' is your DataFrame with the necessary columns: 'funcs', 'files', and 'enhanced_cwe_category'

    # Adjust the font sizes
    plt.rcParams.update({
        'font.size': 15,  # Adjust base font size
        'axes.labelsize': 12,  # Adjust axis label size
        'axes.titlesize': 14,  # Adjust title size
        'xtick.labelsize': 10,  # Adjust x-axis tick label size
        'ytick.labelsize': 10,  # Adjust y-axis tick label size
    })
    # Dark green color for the plots
    dark_green_color = '#6d9eeb'

    # Plotting and saving the Distribution of Functions
    plt.figure(figsize=(5,4))
    sns.violinplot(data=data, y='funcs',color=dark_green_color)
    plt.title('Distribution of Functions')
    plt.ylabel('#Functions')
    # Apply thousand separators to y-axis tick labels
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(with_commas))
    
    plt.savefig('distribution_of_functions.png')

    # plt.tight_layout()
    plt.close()

    # Plotting and saving the Distribution of Files
    plt.figure(figsize=(5, 4))
    sns.violinplot(data=data, y='files',color=dark_green_color)
    plt.title('Distribution of Files')
    # Apply thousand separators to y-axis tick labels
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(with_commas))
    
    plt.ylabel('#Files')
    plt.savefig('distribution_of_files.png')

    # plt.tight_layout()
    plt.close()

    # Plotting and saving the Distribution of Ground Truth Length
    plt.figure(figsize=(6, 4))
    sns.violinplot(data=data, y='ground_truth_length')
    plt.title('Distribution of Ground Truth Length')
    plt.savefig('distribution_of_ground_truth_length.png')
    plt.close()

    # Plotting and saving the Distribution of Vulnerability Categories with a logarithmic scale
    plt.figure(figsize=(10, 8))  # Increased figure size for better spacing
    category_counts = data['enhanced_cwe_category'].value_counts()

    sns.barplot(x=category_counts.values, y=category_counts.index)
    plt.title('Distribution of Vulnerability Categories')
    plt.xlabel('Count')
    plt.ylabel('Category')
    plt.xscale('log')  # Apply logarithmic scale on the x-axis
    plt.tight_layout()  # Adjust layout
    plt.savefig('log_distribution_of_vulnerability_categories.png')
    plt.close()

