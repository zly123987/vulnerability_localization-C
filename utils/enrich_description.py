import csv
import json
from nltk.tokenize import word_tokenize
import string
import pymongo
from rank_bm25 import BM25Okapi
from config import mongo_db, mongodb_host, mongodb_port

# Simple preprocessing function
from utils.query_reformulation import reformulate_query

from config import query_expansion_choice


def split_cpe(cpe):
    return cpe.split(':')[4]



def preprocess(text):
    text = text.lower()  # Convert to lowercase
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    tokens = word_tokenize(text)  # Tokenize
    return tokens

def bm25_rank_alg(query_description, cve_descriptions):
    # Preprocess all descriptions
    preprocessed_descriptions = [preprocess(desc) for desc in cve_descriptions]

    # print(len(preprocessed_descriptions))
    # Initialize BM25
    bm25 = BM25Okapi(preprocessed_descriptions)

    # Preprocess your query (a specific CVE description you're comparing others to)
    query = preprocess(query_description)

    # Get scores for all descriptions in relation to the query
    scores = bm25.get_scores(query)

    # Find the top N similar descriptions
    top_n = 5
    top_n_indexes = sorted(range(len(scores)), key=lambda i: scores[i], reverse=True)[:top_n]
    return [cve_descriptions[index] for index in top_n_indexes], scores


def get_all_description(c):
    print('[INFO] Retrieving all descriptions from MongoDB')
    coll = c[mongo_db]['dissected_description']
    ret = {}
    for doc in coll.find({'description': {'$ne': ''}}):
        ret[doc['cve_id']] = doc
    return ret

def get_cwe_description(cwe):
    with open("materials/cwe1000.csv") as f:
        for l in csv.reader(f):
            if l[0]== cwe:
                return l[4] +'. ' + l[5]
            
def get_all_cwe_description():
    ret = {}
    with open("materials/cwe1000.csv") as f:
        for l in csv.reader(f):
            ret[l[0]] = l[4] +'. ' + l[5]

    return ret

def pseudo_relevance_feedback(description, cve, cwe, product, cpe, c):
    '''
    revelance feedback using bm25 based on CWE descriptions of other CVEs
    :param description:
    :param cve_description:
    :param cve:
    :param cwe:
    :param product:
    :param cpe:
    :return:
    '''
    candidates = {} # cve: cwe
    coll = c[mongo_db]['dissected_description']
    if not cpe:
        return []
    for doc in coll.find({'split_cpe': split_cpe(cpe)}):
        if 'cpes' not in doc or len(doc['cpes'])==0:
            continue
        # if fuzz.partial_ratio(product.lower(), value['library'].lower())>70:
        candidates[cve] = cwe
    cwe_descriptions = []
    for cve, cwe in candidates.items():
        cwe_description = get_cwe_description(cwe)
        if not cwe_description:
            continue
        cwe_descriptions.append(cwe_description)
    if len(cwe_descriptions)==0:
        return []
    top_5_doc, scores = bm25_rank_alg(description, cwe_descriptions)
    # print(description)
    # print('\n')
    # print(top_5_doc)
    return top_5_doc

def query_expansion(c):
    cve = 'CVE-2019-1002100'
    cwe = 'CWE-20'
    cpe = 'cpe:2.3:a:apache:struts:2.3.1.1:*:*:*:*:*:*:*'
    product = 'spring-framework'
    description = 'The Jakarta Multipart parser in Apache Struts 2 2.3.x before 2.3.32 and 2.5.x before 2.5.10.1 has incorrect exception handling and error-message generation during file-upload attempts, which allows remote attackers to execute arbitrary commands via a crafted Content-Type, Content-Disposition, or Content-Length HTTP header, as exploited in the wild in March 2017 with a Content-Type header containing a #cmd= string.'
    all_cve_description = get_all_description(c)
    original_description, expanded_part = query_expansion_one(description, cve, cwe, product, cpe, c)
    weights, expanded_part = reformulate_query(original_description, expanded_part)
    return weights, expanded_part


def query_expansion_one(description, cve, cwe, product, cpe, c):

    if query_expansion_choice == 'concat':
        if cwe:
            cwe_description = get_cwe_description(cwe.replace('CWE-', ''))
            if not cwe_description:
                expanded_list = pseudo_relevance_feedback(description, cve, cwe, product, cpe, c)
                if len(expanded_list)==0: # no cwe description
                    enriched_description = ''
                else:
                    enriched_description = expanded_list[0]
            else:
                enriched_description = cwe_description
        else:
            expanded_list = pseudo_relevance_feedback(description,cve, cwe, product, cpe, c)
            if len(expanded_list)==0: # no cwe description
                enriched_description = ''
            else:
                enriched_description = expanded_list[0]
        return description, enriched_description
    if query_expansion_choice == 'description_only':
        return description, ''
    if query_expansion_choice == 'filter_first':
        # if cwe:
        #     cwe_description = get_cwe_description(cwe.replace('CWE-', ''))
        #     if not cwe_description:
        #         expanded_list = pseudo_relevance_feedback(description, cve, cwe, product, cpe, c)
        #         if len(expanded_list)==0: # no cwe description
        #             enriched_description = ''
        #         else:
        #             enriched_description = expanded_list[0]
        #     else:
        #         enriched_description = cwe_description
        # else:
        #     expanded_list = pseudo_relevance_feedback(description,cve, cwe, product, cpe, c)
        #     if len(expanded_list)==0: # no cwe description
        #         enriched_description = ''
        #     else:
        #         enriched_description = expanded_list[0]
        # return description, enriched_description
        return description, ''
    if query_expansion_choice == 'filter_first_patch_only':
        return description, ''
    if query_expansion_choice == 'repeat':
        if cwe:
            cwe_description = get_cwe_description(cwe.replace('CWE-', ''))
            if not cwe_description:
                expanded_list = pseudo_relevance_feedback(description , cve, cwe, product, cpe, c)
                if len(expanded_list)==0: # no cwe description
                    enriched_description = ''
                else:
                    enriched_description = expanded_list[0]
            else:
                enriched_description = cwe_description
        else:
            expanded_list = pseudo_relevance_feedback(description, cve, cwe, product, cpe, c)
            if len(expanded_list)==0: # no cwe description
                enriched_description = ''
            else:
                enriched_description = expanded_list[0]
        return description*5, enriched_description
    # if query_expansion_choice == 'dissected_discription':

def enrich_description(description,c, cve):
    desc_coll = c[mongo_db]['dissected_description']
    dissected_description = desc_coll.find_one({'cve_id': cve})
    # original_description = dissected_description['description']
    if len(dissected_description['cpes'])!=0:
        cpe = dissected_description['cpes'][0]
    else:
        cpe = ''
    cwe = dissected_description['cwe']
    product = dissected_description['library']


    # query expansion
    original_description, expanded_part = query_expansion_one(description, cve, cwe, product, cpe, c)
    weights, expanded_part = reformulate_query(original_description, expanded_part)
    enriched_description = original_description+ ' '.join(expanded_part)
    return enriched_description, {}

if __name__ == "__main__":
    c = pymongo.MongoClient(mongodb_host, mongodb_port)
    cve = 'CVE-2019-1002100'
    cwe = 'CWE-20'
    product = 'spring-framework'
    description = 'Spring Framework, versions 5.0 prior to 5.0.10 and 4.3 prior to 4.3.20 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack.'
    query_expansion(description, cve, cwe, product, c)